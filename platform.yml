---
- name: Installing platform
  hosts: rockstat
  become: yes
  tasks:

    # - debug: msg={{_local_config}}
    #   tags: ["always"]
    
    - debug:
        msg: 
          email: "{{_email}}"
          realname: "{{_fullname}}"
          domain: "{{_domain}}"
          admin_password: "{{_admin_password}}"
          enable_support: "{{_enable_support}}"
          ssl_wildcard: "{{_ssl_wildcard}}"
      tags: ['always']

      ##### ##### ##### ##### #####    Check DNS configuration    ##### ##### ##### ##### ##### 


    - block:
        - include_tasks: tasks/check_dns.yml
      vars:
        check_domains: "{{_domains + [_domain]}}"
      tags: ['never', 'ssl', 'full']

      ##### ##### ##### ##### #####    Check is python 3    ##### ##### ##### ##### ##### 


    - name: Checking python interpreter
      assert:
        that: 
          - "ansible_python_interpreter == '/usr/bin/python3'"
        msg: "Required python 3. Details: https://docs.ansible.com/ansible/latest/reference_appendices/python_3_support.html"
      tags: ["always"]

    - name: Creating dirs
      file: 
        state: directory
        path: "{{item}}"
      with_items: "{{create_dirs|flatten}}"
      tags: ["never", "full", "platform", "dirs"]

      ##### ##### ##### ##### #####    Server configuration    ##### ##### ##### ##### ##### 
      
    - block:
      - name: Including Base Server role
        include_role:
          name: dr.server
        vars:
          drs_setup_user: yes
          drs_user: '{{support_user}}'
          drs_home_dir: "{{home_dir}}"
          drs_pub_key_file: '{{support_key_file}}'
          drs_disable_ipv6: "{{disable_ipv6}}"
          drs_extra_hosts: "{{etc_hosts}}"
          r_authorized_key_remove: "{{ not _enable_support }}"
      when: 'setup_server == True'
      tags: ['never', 'os', 'network', 'system', 'full']


    ##### ##### ##### ##### #####    Docker server     ##### ##### ##### ##### ##### 

    - block:
      - name: Including Docker role
        include_role:
          name: dr.docker
        vars: 
          drd_users:
          - "{{support_user}}"
          drd_create_network: yes
          drd_version: edge
          drd_net_name: '{{docker_net_name}}'
          drd_bind_ip: "{{docker_host_ip}}"
          drd_interface: '{{docker_interface}}'
          drd_net: '{{docker_net}}'
          drd_mtu: '1400'
      tags: ['never', 'system', 'docker', 'full']

    ##### ##### ##### ##### #####    Logspout    ##### ##### ##### ##### ##### 

    - name: Starting Ebaloger logs streamer container
      block:

      - name: Removing Logspout cointainer
        docker_container:
          name: logspout
          state: absent
      
      - name: Running ebaloger cointainer
        docker_container:
          name: ebaloger
          hostname: ebaloger
          image: "{{images.ebaloger}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          restart_policy: "{{_restart_policy}}"
          restart: yes
          pull: yes
          recreate: yes
          memory: "100m"
          env: "{{ container_env }}"
          volumes: [ "/var/run/docker.sock:/var/run/docker.sock" ]
          ports:
            - "{{if_inner}}:{{ports.ebaloger_http.0}}:{{ports.ebaloger_http.1}}"
            - "{{if_inner}}:{{ports.ebaloger_udp.0}}:{{ports.ebaloger_udp.1}}"
      vars:
        service: ebaloger
        endpoints:
          loggly: "syslog+tcp://{{_loggly_hostname}}"
          papertrail: "syslog+tls://{{_papertrail_hostname}}"
        env:
          common:
            SYSLOG_HOSTNAME: "{{hostname}}"
            TAIL: 100
          loggly:
            SYSLOG_STRUCTURED_DATA: "{{_loggly_api_key}}@41058 tag=\"Logspout\""
      tags: ['never', 'ebaloger', 'logger', 'monitoring', 'platform', 'ppart', 'docker-container', 'full']

    ##### ##### ##### ##### #####    Dashboard    ##### ##### ##### ##### ##### 

    - name: Cloning dashboard content
      git:
        repo: '{{repos.dashboard}}'
        version: HEAD
        force: yes
        accept_hostkey: yes
        dest: '{{dirs.dashboard}}'
      tags: ['dashboard', 'platform', 'ppart', 'band', 'static', 'full']

    ##### ##### ##### ##### #####    Splash screen    ##### ##### ##### ##### ##### 

    - block:
      - name: Cloning splash screen repo
        git:
          repo: "{{repos.splash}}"
          dest: "{{dirs.splash}}"
          accept_hostkey: yes
          force: yes
        
      - template:
          src: google-webmaster.j2
          dest: "{{dirs.splash}}/{{_google_webmaster}}"
        when: "_google_webmaster is defined and _google_webmaster != ''"
      
      tags: ['splash', 'platform', 'ppart', 'band', 'static', 'full']


    ##### ##### ##### ##### #####    Exposeur (UFW, iptables)    ##### ##### ##### ##### ##### 

    - block:
      - name: Including Exposeur role
        include_role:
          name: dr.exposeur
        vars:
          expo_reset_ufw: true
          expo_rules: '{{firewall_rules|flatten + host_firewall_rules|default([]) + group_firewall_rules|default([])}}'
          expo_expose_rules: '{{expose_rules|default([]) + host_expose_rules|default([]) + group_expose_rules|default([])}}'
      tags: ['never', 'firewall', 'network', 'system', 'full']

    ##### ##### ##### ##### #####    Lets encrypt - acme.sh    ##### ##### ##### ##### ##### 

    - block:
          
        - name: Including LetsEncrypt AcmeDNS role
          include_role:
            name: dr.letsencrypt.wildcard.auto
          vars:
            _r_domain: "{{_domain}}"
            _r_subdomains: "{{_subdomains}}"
            _r_webroot: "{{dirs.well_known}}"
            _r_force: "{{ssl_force|default(False)|bool}}"
            _r_wildcard: "{{_ssl_wildcard}}"
            _r_docker_networks: [ { name: "{{docker_net_name}}" } ]
            _r_docker_labels: "{{ {}|combine(labels, docker_band_lbls) }}"
            _r_check_addr: "{{if_inner}}:{{ports.http.0}}"
            _r_bind_addr: "{{if_inner}}:{{ports.letsencrypt.0}}"
            _r_cert_root: "{{dirs.certs}}"

        - shell: nginx -t && nginx -s reload || /bin/true

      vars:
        oldloc: "/etc/letsencrypt/live/{{_domain}}"
        labels:
          band.service.title: "SSL Renewer"
          band.service.def_position: "0x6"


      when: "_setup_ssl == True"
      tags: ['never', 'full', 'system', 'ssl']


    ##### ##### ##### ##### #####    Nginx    ##### ##### ##### ##### ##### 

    - block:
      - include_vars: vars/nginx.yml
      - name: Including Nginx role
        include_role:
          name: jdauphant.nginx
        vars:
          nginx_official_repo: no
          keep_only_specified: yes
          nginx_http_params: '{{_nginx_http_params}}'
          nginx_sites: "{{_nginx_sites|combine(_nginx_sites_extra|default({}))}}"
          nginx_auth_basic_files:
            common: "{{ common_users|flatten }}"
          nginx_configs:
            upgrade: '{{_nginx_proto_upgrade}}'
            gzip: '{{_nginx_gzip_params}}'
            proxy: '{{_nginx_proxy_params + _nginx_proxy_params_extra|default([])}}'
            upstream: '{{_nginx_upstreams}}'
            ssl: '{{_nginx_ssl_params}}'
      vars:
        # local_config: "{{ansible_local.config|default({})}}"
        # local_general: "{{local_config.general|default({})}}"
        common_users:
          - "admin:{{_admin_password}}"
          # - "{{local_general.users}}"
      when: "setup_nginx == True"
      tags: ['never', 'nginx', 'system', 'full']


    ##### ##### ##### ##### #####    Netdata    ##### ##### ##### ##### ##### 

    - block:
      - name: Including Netdata role
        include_role:
          name: dr.netdata
        vars:
          drn_allow:
            dashboard_from: "*"
            badges_from: "*"
            conf_from: "*"
            connections_from: "*"
            streaming_from: "*"
          drn_stream: '{{netdata_stream_config|default({})}}'
          drn_backend: '{{netdata_backend_config|default({})}}'
          drn_bind_to: "{{if_inner}}"
      tags: ['never', 'netdata', 'system', 'full']


    ##### ##### ##### ##### #####    Clickhouse    ##### ##### ##### ##### ##### 

    - block: 
      - name: Including ClickHouse role
        include_role:
          name: AlexeySetevoi.clickhouse
        vars:
          clickhouse_listen_host_default: ["127.0.0.1", "::1", "{{if_inner}}"]
          clickhouse_networks_default: ["127.0.0.1", "::1", "{{docker_net}}"]
          clickhouse_profiles_custom: "{{_clickhouse_profiles_custom}}"
          clickhouse_users_custom: "{{_clickhouse_users_custom}}"
          clickhouse_logger: "{{_clickhouse_logger}}"
          clickhouse_dbs_custom: [ {name: '{{ch_db}}'} ]
          clickhouse_path_data: "{{dirs.clickhouse}}"
          clickhouse_path_tmp: "{{dirs.clickhouse_tmp}}"
        retries: 3
        delay: 3
      tags: ['never', 'clickhouse', 'clickhouse-server', 'system', 'full']

    ##### ##### ##### ##### #####    Redis server    ##### ##### ##### ##### ##### 

    - name: Redis setup
      block:

      - name: Running Redis cointainer
        docker_container:
          name: redis
          hostname: redis
          image: "{{images.redis}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          restart_policy: "{{_restart_policy}}"
          restart: yes
          pull: yes
          recreate: yes
          memory: "300m"
          ports: ["{{if_inner}}:{{ports.redis.0}}:{{ports.redis.1}}"]
          volumes: ["{{dirs.redis}}:/data"]
      tags: ['never', 'redis', 'system', 'docker-container', 'full']

    ##### ##### ##### ##### #####    Band Director    ##### ##### ##### ##### ##### 

    - block:

      - docker_image:
          name: "{{images.band}}"
          pull: yes
          force: yes

      - name: Cloning Band-set repo
        git:
          repo: "{{repos.band_set}}"
          dest: "{{dirs.band_set}}"
          version: "{{branch}}"
          accept_hostkey: yes
          force: yes

      - name: Running Director cointainer
        docker_container:
          name: director
          hostname: director
          image: "{{images.director}}"
          labels: "{{docker_band_lbls}}"
          ports: [ "{{if_inner}}:{{ports.director.0}}:{{ports.director.1}}" ]
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          env: "{{ container_env|combine({'ENCODED_ENV': container_env|to_json }) }}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          recreate: yes
          memory: "300m"
          volumes:
            - "{{dirs.band_set}}:/images/band_set"
            - "{{dirs.rockme_set}}:/images/rockme_set"
            - "{{dirs.user_images}}:/images/user"
            - "{{dirs.director_data}}:/data" # containers configs
            - "/var/run/docker.sock:/var/run/docker.sock"
      vars:
        service: director
      tags: ['band', 'platform', 'ppart', 'director', 'docker-container', 'full']

    ##### ##### ##### ##### #####    Front    ##### ##### ##### ##### ##### 

    - block:
      - docker_container: name=frontier state=absent

      - name: Running Front cointainer
        docker_container:
          name: front
          hostname: front
          image: "{{ images.front }}"
          labels: "{{ docker_band_lbls }}"
          ports: 
            - "{{if_inner}}:{{ports.front.0}}:{{ports.front.1}}"
            - "{{if_inner}}:{{ports.front_ws.0}}:{{ports.front_ws.1}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          env: "{{container_env}}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          recreate: yes
          memory: "300m"
          volumes:
            - "{{dirs.front_custom_config}}:/app/config/custom"
      vars:
        service: "front"
      tags: ['front', 'platform', 'ppart', 'rockme', 'docker-container', 'full']


    ##### ##### ##### ##### #####    ClickHouse migrations    ##### ##### ##### ##### ##### 
    # - name: Including ClickHouse maintain role
    #   block:
    #   - import_tasks: tasks/ch_migrate.yml
    #     vars:
    #       operate_db: "{{ch_db}}"
    #       operate_host: "127.0.0.1"
    #       migrations_path: clickhouse_migrations
    #   tags: ['never', 'chmigrate']

        ##### ##### ##### ##### #####    Clickhouse Proxy    ##### ##### ##### ##### ##### 

    - block:

      - name: Rendering CHProxy config
        template:
          src: 'chproxy/config.yml.j2'
          dest: '{{chproxy_config}}'

      - name: Running Chproxy cointainer
        docker_container:
          name: chproxy
          hostname: chproxy
          image: "{{images.chproxy}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          restart_policy: "{{_restart_policy}}"
          restart: yes
          pull: yes
          recreate: yes
          memory: "200m"
          ports: ["{{if_inner}}:{{ports.chproxy.0}}:{{ports.chproxy.1}}"]
          volumes: ["{{chproxy_config}}:/config.yml:ro"]
      vars:
        chproxy_config: "{{etc_dir}}/chproxy.yml"
        chproxy_defs: "{{_chproxy_defs}}"
        chproxy_allowed_networks: "{{_chproxy_allowed_networks_default + _chproxy_allowed_networks|default([])}}"
        chproxy_clusters: "{{_chproxy_clusters_default + _chproxy_clusters|default([])}}"
        chproxy_users: "{{_chproxy_users_default + _chproxy_users|default([])}}"
      tags: ['never', 'clickhouse-proxy', 'chproxy', 'platform', 'pservice', 'docker-container', 'full']


    ##### ##### ##### ##### #####    ClickHouse Writer    ##### ##### ##### ##### ##### 

    - block:
      - name: Running ChWriter cointainer
        docker_container:
          name: chwriter
          hostname: chwriter
          image: "{{images.chwriter}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          env: "{{container_env}}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          recreate: yes
          memory: "300m"
          volumes:
            - "{{dirs.chwriter_custom_config}}:/app/config/custom"
            - "{{dirs.chwriter_emergency}}:/app/emergency"
      vars:
        service: chwriter
      tags: ['chwriter', 'platform', 'ppart', 'rockme', 'docker-container', 'full']

    ##### ##### ##### ##### #####    Heavyload    ##### ##### ##### ##### ##### 


    - block:
      - name: Including Docker container role for Heavyload service
        docker_container:
          name: heavyload
          hostname: heavyload
          image: "{{images.heavyload}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          env: "{{container_env}}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          memory: "100m"
          volumes:
            - "{{dirs.uploads}}:/go/src/heavyload/upload"
          ports:
            - "{{if_inner}}:{{ports.heavyload.0}}:{{ports.heavyload.1}}"
      vars:
        service: heavyload
      tags: ['heavyload', 'platform', 'pservice', 'docker-container', 'full']


    ##### ##### ##### ##### #####    Anaconda    ##### ##### ##### ##### ##### 
    - block:
      - name: Running Anaconda cointainer
        docker_container:
          name: anaconda
          hostname: anaconda
          image: "{{images.anaconda}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          restart_policy: "{{_restart_policy}}"
          restart: yes
          pull: yes
          recreate: yes
          memory: "2g"
          volumes: [ '{{dirs.notebooks}}:/opt/notebooks' ]
          ports: [ "{{if_inner}}:{{ports.jupyter.0}}:{{ports.jupyter.1}}" ]
          env: "{{ container_env }}"
      vars:
        service: anaconda
        cmd_parts:
      when: 'setup_jupyter == True'
      tags: ['never', 'anaconda', 'jupyter', 'platform', 'pservice', 'docker-container', 'full']


    ##### ##### ##### ##### #####    Grafana    ##### ##### ##### ##### ##### 
    - block:
      - name: Creating Grafana datadir
        file:
          state: directory
          path: "{{dirs.grafana_data}}"
          owner: 472 # grafana container ids
          group: 472

      - name: Running Grafana cointainer
        docker_container:
          name: grafana
          hostname: grafana
          image: "{{images.grafana}}"
          labels: "{{docker_band_lbls}}"
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          recreate: yes
          memory: "300m"
          ports:
            - "{{if_inner}}:{{ports.grafana.0}}:{{ports.grafana.1}}"
          volumes:
            - '{{dirs.grafana_data}}:/var/lib/grafana'
      tags: ['never', 'grafana', 'platform', 'pservice', 'docker-container', 'full']

    ##### ##### ##### ##### #####    Theia    ##### ##### ##### ##### ##### 
    - block:

      - name: Running Theia cointainer
        docker_container:
          name: theia
          hostname: theia
          image: "{{images.theia}}"
          labels: "{{docker_band_lbls}}"
          ports: [ "{{if_inner}}:{{ports.theia.0}}:{{ports.theia.1}}" ]
          networks: [ { name: "{{docker_net_name}}" } ]
          etc_hosts: "{{etc_hosts}}"
          env: "{{ container_env }}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          recreate: yes
          memory: "2g"
          volumes:
            - "{{dirs.workspace}}:/home/theia/project/:cached"
            - "{{dirs.user_images}}:/home/theia/project/my_images:cached"
            - "{{dirs.band_set}}:/home/theia/project/sources_ro/band_set:ro"
            - "{{dirs.band_set}}/__skeletons:/home/theia/project/sources_ro/skeletons:ro"
            # - "{{dirs.rockme_set}}:{{workspace}}/sources_ro/rockme_set:ro"
      vars:
        service: theia
      when: 'setup_theia == True'
      tags: ['theia', 'platform', 'pservice', 'band', 'docker-container', 'full']


    - import_tasks: tasks/setup_vpn_server.yml
      tags: ['never', 'ovpn-server']

    # - import_tasks: extensions/metrics_server.yml
    #   when: 'metrics_server == True'

    # - import_role:
    #     name: dr.openvpn-client
    #   vars:
    #     openvpnc_key: '{{s2s_vpn_key}}'
    #   when: s2s_vpn_connect is defined and s2s_vpn_connect == True and vpn_id is defined
    #   tags: ['s2s-ovpn-client', 's2s-ovpn']
    - block:
        - debug: msg="Binding http debug to {{_bind}}. Container state {{_state}}"

        - docker_container:
            name: http_debug
            state: absent

        - name: HTTP debug service
          docker_container:
            name: httpdebug
            state: "{{_state}}"
            hostname: httpdebug
            image: "{{images.httpdebug}}"
            labels: "{{docker_band_lbls}}"
            networks: [ { name: "{{docker_net_name}}" } ]
            etc_hosts: "{{etc_hosts}}"
            restart_policy: "{{_restart_policy}}"
            restart: yes
            pull: yes
            recreate: yes
            memory: "100m"
            ports:
              - "{{_bind}}"
      vars:
        _state: "{{ (bind|default('') == 'absent')|ternary('absent', 'started') }}"
        _bind_default: "{{if_inner}}:{{ports.httpdebug.0}}:{{ports.httpdebug.1}}"
        _bind_dirty: "{{bind|default(_bind_default)}}"
        _bind: "{{ _bind_dirty + ':' + ports.httpdebug.1|string if ':' in _bind_dirty else _bind_default }}"
      tags: ['never', 'httpdebug']
  

    - block:
      - name: Pulling and starting Fake-Shop
        docker_container:
          name: "{{service}}"
          hostname: "{{service}}"
          image: "{{images[service]}}"
          labels: "{{docker_band_lbls}}"
          env: "{{container_env}}"
          restart_policy: "{{_restart_policy}}"
          pull: yes
          restart: yes
          memory: "50m"
          ports:
            - "{{if_inner}}:{{ports[service].0}}:{{ports[service].1}}"
      vars:
        service: fakeshop
      tags: ['never', 'fakeshop']
